# TypeProf 0.21.11

# Classes
module Baykit
  module BayServer
    module Docker
      module Fcgi
        class FcgWarpHandler
          STATE_READ_HEADER: Integer
          STATE_READ_CONTENT: Integer
          @cur_warp_id: Integer
          @line_buf: String
          @state: Integer
          @pos: Integer
          @last: Integer
          @data: String
          @protocol_handler: FcgProtocolHandler

          def initialize: (untyped pkt_store) -> void
          def reset: -> nil
          def next_warp_id: -> Integer
          def new_warp_data: (Integer warp_id) -> untyped
          def send_res_headers: (Tours::Tour tur) -> void
          def send_res_content: (Tours::Tour tur, String bytes, Integer ofs, Integer len) -> void
          def send_end_tour: (Tours::Tour tur, bool keep_alive) -> void
          def on_protocol_error: (Exception err) -> bool
          def verify_protocol: (String proto) -> nil

          def handle_begin_request: (Command::CmdBeginRequest cmd) -> Integer
          def handle_end_request: (Command::CmdEndRequest cmd) -> Integer
          def handle_params: (Command::CmdParams cmd) -> Integer
          def handle_stderr: (Command::CmdStdErr cmd) -> Integer
          def handle_stdin: (Command::CmdStdIn cmd) -> Integer
          def handle_stdout: (Command::CmdStdOut cmd) -> Integer

          def read_header: (Tours::Tour tur) -> void
          def read_content: (Tours::Tour tur) -> void
          def parse_header: (Util::Headers headers) -> bool
          def end_req_content: (Tours::Tour tur) -> void
          def change_state: (Integer new_state) -> void
          def reset_state: -> void
          def send_stdin: (Tours::Tour tur, String data, Integer ofs, Integer len) -> void
          def send_begin_req: (Tours::Tour tur) -> void
          def send_params: (Tours::Tour tur) -> void
          def ship: -> Common::WarpShip

          class WarpProtocolHandlerFactory
            def create_protocol_handler: (Protocol::PacketStore pkt_store) -> FcgWarpHandler
          end
        end
      end
    end
  end
end
