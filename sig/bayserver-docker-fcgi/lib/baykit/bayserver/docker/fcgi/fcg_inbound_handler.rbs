# TypeProf 0.21.11

# Classes
module Baykit
  module BayServer
    module Docker
      module Fcgi
        class FcgInboundHandler
          STATE_BEGIN_REQUEST: Integer
          STATE_READ_PARAMS: Integer
          STATE_READ_STDIN: Integer
          @env: Hash[untyped, untyped]
          @state: Integer
          @req_id: Integer
          @cont_len: Integer
          @protocol_handler: untyped
          @req_keep_alive: untyped

          def initialize: -> void
          def init: (untyped proto_handler) -> void
          def to_s: -> String
          def reset: -> Integer
          def send_res_headers: (Tours::Tour tur) -> void
          def send_res_content: (Tours::Tour tur, String bytes, Integer ofs, Integer len) -> void
          def send_end_tour: (Tours::Tour tur, untyped keep_alive) -> void
          def on_protocol_error: (untyped err) -> bool
          def handle_begin_request: (Command::CmdBeginRequest cmd) -> Integer
          def handle_end_request: (Command::CmdEndRequest cmd) -> Integer
          def handle_params: (Command::CmdParams cmd) -> Integer
          def handle_stderr: (Command::CmdStdErr cmd) -> Integer
          def handle_stdin: (Command::CmdStdIn cmd) -> Integer
          def handle_stdout: (Command::CmdStdOut cmd) -> Integer

          private
          def ship: -> Common::InboundShip
          def check_req_id: (Integer received_id) -> void
          def change_state: (Integer new_state) -> void
          def reset_state: -> void
          def end_req_content: (Integer check_id, Tours::Tour tur) -> void
          def start_tour: (Tours::Tour tur) -> void

          class InboundProtocolHandlerFactory
            def create_protocol_handler: (Protocol::PacketStore pkt_store) -> Protocol::ProtocolHandler
          end
        end
      end
    end
  end
end
